---
    -   hosts: 127.0.0.1
        connection: local
        become: yes
        remote_user: root
        vars:
            build_webconsole:  "false"
            install_n3iwf: "false"
            GTP5G_DIR_INSTALL : "/root/gtp5g"
            FREE5GC_DIR_INSTALL : "/root/go/src/free5gc"
            UPF_DIR_CONFIG : "/root/go/src/free5gc/NFs/upf/build/config"
            WEB_CONSOLE_FRONTEND_DIR : "/root/go/src/free5gc/webconsole/frontend"
            WEB_CONSOLE_BASE_DIR : "/root/go/src/free5gc/webconsole"
            NFS_DIR_CONFIG : "/root/go/src/free5gc/config"
            NRF_DIR : "/root/go/src/free5gc/NFs/nrf"
            UDR_DIR : "/root/go/src/free5gc/NFs/udr"
            UDM_DIR : "/root/go/src/free5gc/NFs/udm"
            AUSF_DIR : "/root/go/src/free5gc/NFs/ausf"
            NSSF_DIR : "/root/go/src/free5gc/NFs/nssf"
            AMF_DIR : "/root/go/src/free5gc/NFs/amf"
            PCF_DIR : "/root/go/src/free5gc/NFs/pcf"
            SMF_DIR : "/root/go/src/free5gc/NFs/smf"
            N3IWF_DIR : "/root/go/src/free5gc/NFs/n3iwf"
            GO_SRC_DIR : "/root/go/src"
            HOME_DIR: "/root"
            FREE5GC_GIT_CHECKOUT_URL_FREEGC_TAG_VERSION: "--recursive -b v3.1.1 -j `nproc` https://github.com/free5gc/free5gc.git"
            FREE5GC_CHECKOUT_FOLDER_NAME: "free5gc"
            GTP5G_VERSION: "v0.8.2"
            PREDEFINED_IP_ADDRESS: "false"
            MONGO_URL_CONNECTION: "mongodb://127.0.0.1:27017"
            NRF_IP_ADDRESS: "127.0.0.10"
            NRF_PORT: "8000"
            UDR_IP_ADDRESS: "127.0.0.4"
            UDR_PORT: "8000"
            UDM_IP_ADDRESS: "127.0.0.3"
            UDM_PORT: "8000"
            AUSF_IP_ADDRESS: "127.0.0.9"
            AUSF_PORT: "8000"
            NSSF_IP_ADDRESS: "127.0.0.31"
            NSSF_PORT: "8000"
            AMF_NGAP_IP_ADDRESS: "127.0.0.1"
            AMF_IP_ADDRESS: "127.0.0.18"
            AMF_PORT: "8000"
            PCF_IP_ADDRESS: "127.0.0.7"
            PCF_PORT: "8000"
            SMF_N3_INTERFACE_IP_ADDRESS: "127.0.0.1"
            SMF_N4_INTERFACE_IP_ADDRESS: "127.0.0.1"
            SMF_IP_ADDRESS: "127.0.0.2"
            SMF_PORT: "8000"
            UPF_IP_ADDRESS: "127.0.0.8"
            GTPU_UPF_IP_ADDRESS: "127.0.0.8"
            N3IWF_AMF_SCTP_PORT: "38412"
            N3IWF_IKE_BIND_ADDRESS: "127.0.0.21"
            N3IWF_IP_SEC_INTERFACE_ADDRESS: "10.0.0.1"
            N3IWF_UE_IP_ADDRESS_RANGE: "10.0.0.0/24"
            N3IWF_GTP_BIND_ADDRESS: "10.200.200.2"
            N3IWF_IP_SEC_INTERFACE_MARK: "5"
            N3IWF_NAS_TCP_PORT: "20000"
            
        tasks:
            - fail: 
                msg: "'internet_network_interface' not found, this parameter is required!"
              when: internet_network_interface == ''

            - name: Environment validation!
              assert:
                that:
                  - ansible_memtotal_mb >= 500
                msg: "Minimum memory requirements in the deployment environment is 4GB! Operation failed!"
    
            - set_fact:
                AMF_NGAP_IP_ADDRESS: "{{ ansible_default_ipv4.address }}"
                N3IWF_IKE_BIND_ADDRESS: "{{ ansible_default_ipv4.address }}"
                N3IWF_GTP_BIND_ADDRESS: "{{ ansible_default_ipv4.address }}"
                SMF_N3_INTERFACE_IP_ADDRESS: "{{ ansible_default_ipv4.address }}"
                SMF_N4_INTERFACE_IP_ADDRESS: "{{ ansible_default_ipv4.address }}"
                GTPU_UPF_IP_ADDRESS: "{{ ansible_default_ipv4.address }}"
              when: PREDEFINED_IP_ADDRESS == 'false'

            - name: Upgrade all apt packages
              apt: upgrade=dist force_apt_get=yes
            
            - name: Install Basic requirements
              apt:
                    name: ['mongodb', 'wget', 'git', 'ca-certificates', 'net-tools', 'gcc', 'cmake', 'autoconf', 'build-essential', 'libtool', 'pkg-config', 'libmnl-dev', 'libyaml-dev', 'curl']
                    state: present
                    update_cache: yes

            - name: Start Mongo-DB
              shell:  sudo systemctl start mongodb

            - name: Install WebConsole front-end dependencies - 1/3
              shell :  |
                    sudo apt update && sudo apt -y install yarn
#                    curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
#                    echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
#                    sudo apt update && sudo apt -y install yarn

            - name: Remove NodeJS Old version - 2/3
              shell :  |
                    sudo apt-get purge --auto-remove nodejs -y
                    sudo apt-get purge nodejs -y
                    sudo apt-get autoremove

            - name: Install NodeJS 14 - 3/3
              shell :  |
                    sudo apt -y install curl dirmngr apt-transport-https lsb-release
                    curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
                    sudo apt -y install nodejs


            - name: Remove GTP5G (if exists)
              shell:  sudo rm -rf {{ GTP5G_DIR_INSTALL }}
              ignore_errors: true

            - name: Remove free5GC dir (if exists)
              shell:  sudo rm -rf {{ FREE5GC_DIR_INSTALL }}
              ignore_errors: true

            # - name: User-plane Supporting Packages
            #   shell: go get -u github.com/sirupsen/logrus

            - name  : Git Clone GTP5
              shell : git clone -b {{ GTP5G_VERSION   }} https://github.com/free5gc/gtp5g.git
              args:
                chdir: "{{ HOME_DIR }}"
                     
            - name  : Run 'Make' into GTP5G
              shell : make clean && make
              args:
                chdir: "{{ GTP5G_DIR_INSTALL }}"

            - name  : Install GTP5G
              shell : sudo make install
              args:
                chdir: "{{ GTP5G_DIR_INSTALL }}"
              ignore_errors: true

            - name  : Network Setting 1/4
              shell : sudo sysctl -w net.ipv4.ip_forward=1

            - name  : Network Setting 2/4
              shell : sudo iptables -t nat -A POSTROUTING -o {{ internet_network_interface }} -j MASQUERADE
            
            - name  : Network Setting 3/4
              shell : sudo iptables -A FORWARD -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --set-mss 1400

            - name  : Network Setting 4/4
              shell : sudo systemctl stop ufw

            - name  : Remove Free5gc old dir if exist
              shell : rm -rf {{ FREE5GC_CHECKOUT_FOLDER_NAME }}
              args:
                chdir: "{{ GO_SRC_DIR }}"  
              ignore_errors: true

            - name  : Git Clone by free5gc TAG Version
              shell : git clone {{ FREE5GC_GIT_CHECKOUT_URL_FREEGC_TAG_VERSION }} {{ FREE5GC_CHECKOUT_FOLDER_NAME }}
              args:
                chdir: "{{ GO_SRC_DIR }}"

            - name  : Create NRF config dir
              shell : |
                mkdir config
                mkdir config/TLS
              args:
                chdir: "{{ NRF_DIR }}"

            - name  : Copy NRF cert's 1/2
              fetch: src={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/config/TLS/nrf.pem dest={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/NFs/nrf/config/TLS/ flat=yes
              
            - name  : Copy NRF cert's 2/2
              fetch: src={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/config/TLS/nrf.key dest={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/NFs/nrf/config/TLS/ flat=yes

            - name  : Build nrfcfg.yaml config file
              copy:
                dest: "{{ NRF_DIR }}/config/nrfcfg.yaml"
                content: |
                  info:
                    version: 1.0.1
                    description: NRF initial local configuration

                  configuration:
                    MongoDBName: free5gc # database name in MongoDB
                    MongoDBUrl: {{ MONGO_URL_CONNECTION }} # a valid URL of the mongodb
                    sbi: # Service-based interface information
                      scheme: http # the protocol for sbi (http or https)
                      registerIPv4: {{ NRF_IP_ADDRESS }} # IP used to serve NFs or register to another NRF
                      bindingIPv4: {{ NRF_IP_ADDRESS }}  # IP used to bind the service
                      port: {{ NRF_PORT }} # port used to bind the service
                      tls: # the local path of TLS key
                        pem: config/TLS/nrf.pem # NRF TLS Certificate
                        key: config/TLS/nrf.key # NRF TLS Private key
                    DefaultPlmnId:
                      mcc: 208 # Mobile Country Code (3 digits string, digit: 0~9)
                      mnc: 93 # Mobile Network Code (2 or 3 digits string, digit: 0~9)
                    serviceNameList: # the SBI services provided by this NRF, refer to TS 29.510
                      - nnrf-nfm # Nnrf_NFManagement service
                      - nnrf-disc # Nnrf_NFDiscovery service

                  # the kind of log output
                  # debugLevel: how detailed to output, value: trace, debug, info, warn, error, fatal, panic
                  # ReportCaller: enable the caller report or not, value: true or false
                  logger:
                    NRF:
                      debugLevel: info
                      ReportCaller: false

            - name  : Create UDR config dir
              shell : |
                mkdir config
                mkdir config/TLS
              args:
                chdir: "{{ UDR_DIR }}"

            - name  : Copy UDR cert's 1/2
              fetch: src={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/config/TLS/udr.pem dest={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/NFs/udr/config/TLS/ flat=yes
              
            - name  : Copy UDR cert's 2/2
              fetch: src={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/config/TLS/udr.key dest={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/NFs/udr/config/TLS/ flat=yes

            - name  : Build udrcfg.yaml config file
              copy:
                dest: "{{ UDR_DIR }}/config/udrcfg.yaml"
                content: |
                  info:
                    version: 1.0.1
                    description: UDR initial local configuration

                  configuration:
                    sbi: # Service-based interface information
                      scheme: http # the protocol for sbi (http or https)
                      registerIPv4: {{ UDR_IP_ADDRESS }} # IP used to register to NRF
                      bindingIPv4: {{ UDR_IP_ADDRESS }}  # IP used to bind the service
                      port: {{ UDR_PORT }} # port used to bind the service
                      tls: # the local path of TLS key
                        pem: config/TLS/udr.pem # UDR TLS Certificate
                        key: config/TLS/udr.key # UDR TLS Private key
                    mongodb:
                      name: free5gc # Database name in MongoDB
                      url: {{ MONGO_URL_CONNECTION }} # URL of MongoDB
                    nrfUri: http://{{ NRF_IP_ADDRESS }}:{{ NRF_PORT }} # a valid URI of NRF

                  # the kind of log output
                  # debugLevel: how detailed to output, value: trace, debug, info, warn, error, fatal, panic
                  # ReportCaller: enable the caller report or not, value: true or false
                  logger:
                    UDR:
                      debugLevel: info
                      ReportCaller: false

            - name  : Create UDM config dir
              shell : |
                mkdir config
                mkdir config/TLS
              args:
                chdir: "{{ UDM_DIR }}"

            - name  : Copy UDM cert's 1/2
              fetch: src={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/config/TLS/udm.pem dest={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/NFs/udm/config/TLS/ flat=yes
              
            - name  : Copy UDM cert's 2/2
              fetch: src={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/config/TLS/udm.key dest={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/NFs/udm/config/TLS/ flat=yes

            - name  : Build udmcfg.yaml config file
              copy:
                dest: "{{ UDM_DIR }}/config/udmcfg.yaml"
                content: |
                  info:
                    version: 1.0.2
                    description: UDM initial local configuration

                  configuration:
                    serviceNameList: # the SBI services provided by this UDM, refer to TS 29.503
                      - nudm-sdm # Nudm_SubscriberDataManagement service
                      - nudm-uecm # Nudm_UEContextManagement service
                      - nudm-ueau # Nudm_UEAuthenticationManagement service
                      - nudm-ee # Nudm_EventExposureManagement service
                      - nudm-pp # Nudm_ParameterProvisionDataManagement service
                    sbi: # Service-based interface information
                      scheme: http # the protocol for sbi (http or https)
                      registerIPv4: {{ UDM_IP_ADDRESS }} # IP used to register to NRF
                      bindingIPv4: {{ UDM_IP_ADDRESS }}  # IP used to bind the service
                      port: {{ UDM_PORT }} # Port used to bind the service
                      tls: # the local path of TLS key
                        pem: config/TLS/udm.pem # UDM TLS Certificate
                        key: config/TLS/udm.key # UDM TLS Private key
                    nrfUri: http://{{ NRF_IP_ADDRESS }}:{{ NRF_PORT }} # a valid URI of NRF

                    # test data set from TS33501-f60 Annex C.4
                    SuciProfile: # Home Network Public Key ID = slice index +1
                      - ProtectionScheme: 1 # Protect Scheme: Profile A
                        PrivateKey: c53c22208b61860b06c62e5406a7b330c2b577aa5558981510d128247d38bd1d
                        PublicKey: 5a8d38864820197c3394b92613b20b91633cbd897119273bf8e4a6f4eec0a650
                      - ProtectionScheme: 2 # Protect Scheme: Profile B
                        PrivateKey: F1AB1074477EBCC7F554EA1C5FC368B1616730155E0041AC447D6301975FECDA
                        PublicKey: 0472DA71976234CE833A6907425867B82E074D44EF907DFB4B3E21C1C2256EBCD15A7DED52FCBB097A4ED250E036C7B9C8C7004C4EEDC4F068CD7BF8D3F900E3B4

                  # the kind of log output
                  # debugLevel: how detailed to output, value: trace, debug, info, warn, error, fatal, panic
                  # ReportCaller: enable the caller report or not, value: true or false
                  logger:
                    UDM:
                      debugLevel: info
                      ReportCaller: false

            - name  : Create AUSF config dir
              shell : |
                mkdir config
                mkdir config/TLS
              args:
                chdir: "{{ AUSF_DIR }}"

            - name  : Copy AUSF cert's 1/2
              fetch: src={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/config/TLS/ausf.pem dest={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/NFs/ausf/config/TLS/ flat=yes
              
            - name  : Copy AUSF cert's 2/2
              fetch: src={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/config/TLS/ausf.key dest={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/NFs/ausf/config/TLS/ flat=yes

            - name  : Build ausf.yaml config file
              copy:
                dest: "{{ AUSF_DIR }}/config/ausfcfg.yaml"
                content: |
                  info:
                    version: 1.0.2
                    description: AUSF initial local configuration

                  configuration:
                    sbi: # Service-based interface information
                      scheme: http # the protocol for sbi (http or https)
                      registerIPv4: {{ AUSF_IP_ADDRESS }} # IP used to register to NRF
                      bindingIPv4: {{ AUSF_IP_ADDRESS }}  # IP used to bind the service
                      port: {{ AUSF_PORT }} # Port used to bind the service
                      tls: # the local path of TLS key
                        pem: config/TLS/ausf.pem # AUSF TLS Certificate
                        key: config/TLS/ausf.key # AUSF TLS Private key
                    serviceNameList: # the SBI services provided by this AUSF, refer to TS 29.509
                      - nausf-auth # Nausf_UEAuthentication service
                    nrfUri: http://{{ NRF_IP_ADDRESS }}:{{ NRF_PORT }} # a valid URI of NRF
                    plmnSupportList: # the PLMNs (Public Land Mobile Network) list supported by this AUSF
                      - mcc: 208 # Mobile Country Code (3 digits string, digit: 0~9)
                        mnc: 93  # Mobile Network Code (2 or 3 digits string, digit: 0~9)
                      - mcc: 123 # Mobile Country Code (3 digits string, digit: 0~9)
                        mnc: 45  # Mobile Network Code (2 or 3 digits string, digit: 0~9)
                    groupId: ausfGroup001 # ID for the group of the AUSF
                    eapAkaSupiImsiPrefix: false # including "imsi-" prefix or not when using the SUPI to do EAP-AKA' authentication

                  # the kind of log output
                  # debugLevel: how detailed to output, value: trace, debug, info, warn, error, fatal, panic
                  # ReportCaller: enable the caller report or not, value: true or false
                  logger:
                    AUSF:
                      debugLevel: info
                      ReportCaller: false

            - name  : Create NSSF config dir
              shell : |
                mkdir config
                mkdir config/TLS
              args:
                chdir: "{{ NSSF_DIR }}"

            - name  : Copy NSSF cert's 1/2
              fetch: src={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/config/TLS/nssf.pem dest={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/NFs/nssf/config/TLS/ flat=yes
              
            - name  : Copy NSSF cert's 2/2
              fetch: src={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/config/TLS/nssf.key dest={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/NFs/nssf/config/TLS/ flat=yes

            - name  : Build nssfcfg.yaml config file
              copy:
                dest: "{{ NSSF_DIR }}/config/nssfcfg.yaml"
                content: |
                  info:
                    version: 1.0.1
                    description: NSSF initial local configuration

                  configuration:
                    nssfName: NSSF # the name of this NSSF
                    sbi: # Service-based interface information
                      scheme: http # the protocol for sbi (http or https)
                      registerIPv4: {{ NSSF_IP_ADDRESS }} # IP used to register to NRF
                      bindingIPv4: {{ NSSF_IP_ADDRESS }}  # IP used to bind the service
                      port: {{ NSSF_PORT }} # Port used to bind the service
                      tls: # the local path of TLS key
                        pem: config/TLS/nssf.pem # NSSF TLS Certificate
                        key: config/TLS/nssf.key # NSSF TLS Private key
                    serviceNameList: # the SBI services provided by this SMF, refer to TS 29.531
                      - nnssf-nsselection # Nnssf_NSSelection service
                      - nnssf-nssaiavailability # Nnssf_NSSAIAvailability service
                    nrfUri: http://{{ NRF_IP_ADDRESS }}:{{ NRF_PORT }} # a valid URI of NRF
                    supportedPlmnList: # the PLMNs (Public land mobile network) list supported by this NSSF
                      - mcc: 208 # Mobile Country Code (3 digits string, digit: 0~9)
                        mnc: 93 # Mobile Network Code (2 or 3 digits string, digit: 0~9)
                    supportedNssaiInPlmnList: # Supported S-NSSAI List for each PLMN
                      - plmnId: # Public Land Mobile Network ID, <PLMN ID> = <MCC><MNC>
                          mcc: 208 # Mobile Country Code (3 digits string, digit: 0~9)
                          mnc: 93 # Mobile Network Code (2 or 3 digits string, digit: 0~9)
                        supportedSnssaiList: # Supported S-NSSAIs of the PLMN
                          - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                            sd: 010203 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                          - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                            sd: 112233 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                          - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                            sd: 000003 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                          - sst: 2 # Slice/Service Type (uinteger, range: 0~255)
                            sd: 000001 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                          - sst: 2 # Slice/Service Type (uinteger, range: 0~255)
                            sd: 000002 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                    nsiList: # List of available Network Slice Instance (NSI)
                      - snssai: # S-NSSAI of this NSI
                          sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                        nsiInformationList: # Information list of this NSI
                          # the NRF to be used to select the NFs/services within the selected NSI, and an optonal ID
                          - nrfId: http://{{ NRF_IP_ADDRESS }}:{{ NRF_PORT }}/nnrf-nfm/v1/nf-instances
                            nsiId: 10
                      - snssai: # S-NSSAI of this NSI
                          sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                          sd: 000001 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                        nsiInformationList: # Information list of this NSI
                          # the NRF to be used to select the NFs/services within the selected NSI, and an optonal ID
                          - nrfId: http://{{ NRF_IP_ADDRESS }}:{{ NRF_PORT }}/nnrf-nfm/v1/nf-instances
                            nsiId: 11
                      - snssai: # S-NSSAI of this NSI
                          sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                          sd: 000002 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                        nsiInformationList: # Information list of this NSI
                          # the NRF to be used to select the NFs/services within the selected NSI, and an optonal ID
                          - nrfId: http://{{ NRF_IP_ADDRESS }}:{{ NRF_PORT }}/nnrf-nfm/v1/nf-instances
                            nsiId: 12
                          - nrfId: http://{{ NRF_IP_ADDRESS }}:{{ NRF_PORT }}/nnrf-nfm/v1/nf-instances
                            nsiId: 12
                      - snssai: # S-NSSAI of this NSI
                          sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                          sd: 000003 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                        nsiInformationList: # Information list of this NSI
                          # the NRF to be used to select the NFs/services within the selected NSI, and an optonal ID
                          - nrfId: http://{{ NRF_IP_ADDRESS }}:{{ NRF_PORT }}/nnrf-nfm/v1/nf-instances
                            nsiId: 13
                      - snssai: # S-NSSAI of this NSI
                          sst: 2 # Slice/Service Type (uinteger, range: 0~255)
                        nsiInformationList: # Information list of this NSI
                          # the NRF to be used to select the NFs/services within the selected NSI, and an optonal ID
                          - nrfId: http://{{ NRF_IP_ADDRESS }}:{{ NRF_PORT }}/nnrf-nfm/v1/nf-instances
                            nsiId: 20
                      - snssai: # S-NSSAI of this NSI
                          sst: 2 # Slice/Service Type (uinteger, range: 0~255)
                          sd: 000001 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                        nsiInformationList: # Information list of this NSI
                          # the NRF to be used to select the NFs/services within the selected NSI, and an optonal ID
                          - nrfId: http://{{ NRF_IP_ADDRESS }}:{{ NRF_PORT }}/nnrf-nfm/v1/nf-instances
                            nsiId: 21
                      - snssai: # S-NSSAI of this NSI
                          sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                          sd: 010203 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                        nsiInformationList: # Information list of this NSI
                          # the NRF to be used to select the NFs/services within the selected NSI, and an optonal ID
                          - nrfId: http://{{ NRF_IP_ADDRESS }}:{{ NRF_PORT }}/nnrf-nfm/v1/nf-instances
                            nsiId: 22
                      - snssai: # S-NSSAI of this NSI
                          sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                          sd: 112233 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                        nsiInformationList: # Information list of this NSI
                          # the NRF to be used to select the NFs/services within the selected NSI, and an optonal ID
                          - nrfId: http://{{ NRF_IP_ADDRESS }}:{{ NRF_PORT }}/nnrf-nfm/v1/nf-instances
                            nsiId: 23
                    amfSetList: # List of AMF Sets that my be assigned by this NSSF
                      - amfSetId: 1 # the AMF Set identifier
                        amfList: # Instance ID of the AMFs in this set
                          - ffa2e8d7-3275-49c7-8631-6af1df1d9d26
                          - 0e8831c3-6286-4689-ab27-1e2161e15cb1
                          - a1fba9ba-2e39-4e22-9c74-f749da571d0d
                        # URI of the NRF used to determine the list of candidate AMF(s) from the AMF Set
                        nrfAmfSet: http://{{ NRF_IP_ADDRESS }}:{{ NRF_PORT }}/nnrf-nfm/v1/nf-instances
                        # the Nssai availability data information per TA supported by the AMF
                        supportedNssaiAvailabilityData:
                          - tai: # Tracking Area Identifier
                              plmnId: # Public Land Mobile Network ID, <PLMN ID> = <MCC><MNC>
                                mcc: 466 # Mobile Country Code (3 digits string, digit: 0~9)
                                mnc: 92 # Mobile Network Code (2 or 3 digits string, digit: 0~9)
                              tac: 33456 # Tracking Area Code (uinteger, range: 0~16777215)
                            supportedSnssaiList: # Supported S-NSSAIs of the tracking area
                              - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                                sd: 000001 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                              - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                                sd: 000002 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                              - sst: 2 # Slice/Service Type (uinteger, range: 0~255)
                                sd: 000001 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                          - tai: # Tracking Area Identifier
                              plmnId: # Public Land Mobile Network ID, <PLMN ID> = <MCC><MNC>
                                mcc: 466 # Mobile Country Code (3 digits string, digit: 0~9)
                                mnc: 92 # Mobile Network Code (2 or 3 digits string, digit: 0~9)
                              tac: 33457 # Tracking Area Code (uinteger, range: 0~16777215)
                            supportedSnssaiList: # Supported S-NSSAIs of the tracking area
                              - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                              - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                                sd: 000001 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                              - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                                sd: 000002 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                      - amfSetId: 2 # the AMF Set identifier
                        # URI of the NRF used to determine the list of candidate AMF(s) from the AMF Set
                        nrfAmfSet: http://localhost:8084/nnrf-nfm/v1/nf-instances
                        # the Nssai availability data information per TA supported by the AMF
                        supportedNssaiAvailabilityData:
                          - tai: # Tracking Area Identifier
                              plmnId: # Public Land Mobile Network ID, <PLMN ID> = <MCC><MNC>
                                mcc: 466 # Mobile Country Code (3 digits string, digit: 0~9)
                                mnc: 92 # Mobile Network Code (2 or 3 digits string, digit: 0~9)
                              tac: 33456 # Tracking Area Code (uinteger, range: 0~16777215)
                            supportedSnssaiList: # Supported S-NSSAIs of the tracking area
                              - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                              - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                                sd: 000001 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                              - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                                sd: 000003 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                              - sst: 2 # Slice/Service Type (uinteger, range: 0~255)
                                sd: 000001 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                          - tai: # Tracking Area Identifier
                              plmnId: # Public Land Mobile Network ID, <PLMN ID> = <MCC><MNC>
                                mcc: 466 # Mobile Country Code (3 digits string, digit: 0~9)
                                mnc: 92 # Mobile Network Code (2 or 3 digits string, digit: 0~9)
                              tac: 33458 # Tracking Area Code (uinteger, range: 0~16777215)
                            supportedSnssaiList: # Supported S-NSSAIs of the tracking area
                              - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                              - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                                sd: 000001 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                              - sst: 2 # Slice/Service Type (uinteger, range: 0~255)
                    amfList: # List of AMFs that may be assigned by this NSSF
                      - nfId: 469de254-2fe5-4ca0-8381-af3f500af77c # ID of this AMF
                        # The NSSAI availability data information per TA supported by the AMF
                        supportedNssaiAvailabilityData:
                          - tai: # Tracking Area Identifier
                              plmnId: # Public Land Mobile Network ID, <PLMN ID> = <MCC><MNC>
                                mcc: 466 # Mobile Country Code (3 digits string, digit: 0~9)
                                mnc: 92 # Mobile Network Code (2 or 3 digits string, digit: 0~9)
                              tac: 33456 # Tracking Area Code (uinteger, range: 0~16777215)
                            supportedSnssaiList: # Supported S-NSSAIs of the tracking area
                              - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                              - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                                sd: 000002 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                              - sst: 2 # Slice/Service Type (uinteger, range: 0~255)
                          - tai: # Tracking Area Identifier
                              plmnId: # Public Land Mobile Network ID, <PLMN ID> = <MCC><MNC>
                                mcc: 466 # Mobile Country Code (3 digits string, digit: 0~9)
                                mnc: 92 # Mobile Network Code (2 or 3 digits string, digit: 0~9)
                              tac: 33457 # Tracking Area Code (uinteger, range: 0~16777215)
                            supportedSnssaiList: # Supported S-NSSAIs of the tracking area
                              - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                                sd: 000001 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                              - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                                sd: 000002 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                      - nfId: fbe604a8-27b2-417e-bd7c-8a7be2691f8d # ID of this AMF
                        # The NSSAI availability data information per TA supported by the AMF
                        supportedNssaiAvailabilityData:
                          - tai: # Tracking Area Identifier
                              plmnId: # Public Land Mobile Network ID, <PLMN ID> = <MCC><MNC>
                                mcc: 466 # Mobile Country Code (3 digits string, digit: 0~9)
                                mnc: 92 # Mobile Network Code (2 or 3 digits string, digit: 0~9)
                              tac: 33458 # Tracking Area Code (uinteger, range: 0~16777215)
                            supportedSnssaiList: # Supported S-NSSAIs of the tracking area
                              - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                              - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                                sd: 000001 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                              - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                                sd: 000003 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                              - sst: 2 # Slice/Service Type (uinteger, range: 0~255)
                          - tai: # Tracking Area Identifier
                              plmnId: # Public Land Mobile Network ID, <PLMN ID> = <MCC><MNC>
                                mcc: 466 # Mobile Country Code (3 digits string, digit: 0~9)
                                mnc: 92 # Mobile Network Code (2 or 3 digits string, digit: 0~9)
                              tac: 33459 # Tracking Area Code (uinteger, range: 0~16777215)
                            supportedSnssaiList: # Supported S-NSSAIs of the tracking area
                              - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                              - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                                sd: 000001 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                              - sst: 2 # Slice/Service Type (uinteger, range: 0~255)
                              - sst: 2 # Slice/Service Type (uinteger, range: 0~255)
                                sd: 000001 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                      - nfId: b9e6e2cb-5ce8-4cb6-9173-a266dd9a2f0c # ID of this AMF
                        # The NSSAI availability data information per TA supported by the AMF
                        supportedNssaiAvailabilityData:
                          - tai: # Tracking Area Identifier
                              plmnId: # Public Land Mobile Network ID, <PLMN ID> = <MCC><MNC>
                                mcc: 466 # Mobile Country Code (3 digits string, digit: 0~9)
                                mnc: 92 # Mobile Network Code (2 or 3 digits string, digit: 0~9)
                              tac: 33456 # Tracking Area Code (uinteger, range: 0~16777215)
                            supportedSnssaiList: # Supported S-NSSAIs of the tracking area
                              - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                              - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                                sd: 000001 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                              - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                                sd: 000002 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                              - sst: 2 # Slice/Service Type (uinteger, range: 0~255)
                          - tai: # Tracking Area Identifier
                              plmnId: # Public Land Mobile Network ID, <PLMN ID> = <MCC><MNC>
                                mcc: 466 # Mobile Country Code (3 digits string, digit: 0~9)
                                mnc: 92 # Mobile Network Code (2 or 3 digits string, digit: 0~9)
                              tac: 33458 # Tracking Area Code (uinteger, range: 0~16777215)
                            supportedSnssaiList: # Supported S-NSSAIs of the tracking area
                              - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                              - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                                sd: 000001 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                              - sst: 2 # Slice/Service Type (uinteger, range: 0~255)
                              - sst: 2 # Slice/Service Type (uinteger, range: 0~255)
                                sd: 000001 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                    taList: # List of supported tracking area and their related information of this NSSF instance
                      - tai: # Tracking Area Identity
                          plmnId: # Public Land Mobile Network ID, <PLMN ID> = <MCC><MNC>
                            mcc: 466 # Mobile Country Code (3 digits string, digit: 0~9)
                            mnc: 92 # Mobile Network Code (2 or 3 digits string, digit: 0~9)
                          tac: 33456 # Tracking Area Code (uinteger, range: 0~16777215)
                        accessType: 3GPP_ACCESS # Access type of the tracking area
                        supportedSnssaiList: # List of supported S-NSSAIs of the tracking area
                          - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                          - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                            sd: 000001 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                          - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                            sd: 000002 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                          - sst: 2 # Slice/Service Type (uinteger, range: 0~255)
                      - tai: # Tracking Area Identity
                          plmnId: # Public Land Mobile Network ID, <PLMN ID> = <MCC><MNC>
                            mcc: 466 # Mobile Country Code (3 digits string, digit: 0~9)
                            mnc: 92 # Mobile Network Code (2 or 3 digits string, digit: 0~9)
                          tac: 33457 # Tracking Area Code (uinteger, range: 0~16777215)
                        accessType: 3GPP_ACCESS # Access type of the tracking area
                        supportedSnssaiList: # List of supported S-NSSAIs of the tracking area
                          - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                          - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                            sd: 000001 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                          - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                            sd: 000002 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                          - sst: 2 # Slice/Service Type (uinteger, range: 0~255)
                      - tai: # Tracking Area Identifier
                          plmnId: # Public Land Mobile Network ID, <PLMN ID> = <MCC><MNC>
                            mcc: 466 # Mobile Country Code (3 digits string, digit: 0~9)
                            mnc: 92 # Mobile Network Code (2 or 3 digits string, digit: 0~9)
                          tac: 33458 # Tracking Area Code (uinteger, range: 0~16777215)
                        accessType: 3GPP_ACCESS # Access type of the tracking area
                        supportedSnssaiList: # List of supported S-NSSAIs of the tracking area
                          - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                          - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                            sd: 000001 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                          - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                            sd: 000003 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                          - sst: 2 # Slice/Service Type (uinteger, range: 0~255)
                        restrictedSnssaiList: # List of restricted S-NSSAIs of the tracking area
                          - homePlmnId: # Home PLMN identifier
                              mcc: 310 # Mobile Country Code (3 digits string, digit: 0~9)
                              mnc: 560 # Mobile Network Code (2 or 3 digits string, digit: 0~9)
                            sNssaiList: # the S-NSSAIs List
                              - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                                sd: 000003 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                      - tai: # Tracking Area Identifier
                          plmnId: # Public Land Mobile Network ID, <PLMN ID> = <MCC><MNC>
                            mcc: 466 # Mobile Country Code (3 digits string, digit: 0~9)
                            mnc: 92 # Mobile Network Code (2 or 3 digits string, digit: 0~9)
                          tac: 33459 # Tracking Area Code (uinteger, range: 0~16777215)
                        accessType: 3GPP_ACCESS # Access type of the tracking area
                        supportedSnssaiList: # List of supported S-NSSAIs of the tracking area
                          - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                          - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                            sd: 000001 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                          - sst: 2 # Slice/Service Type (uinteger, range: 0~255)
                          - sst: 2 # Slice/Service Type (uinteger, range: 0~255)
                            sd: 000001 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                        restrictedSnssaiList: # List of restricted S-NSSAIs of the tracking area
                          - homePlmnId: # Home PLMN identifier
                              mcc: 310 # Mobile Country Code (3 digits string, digit: 0~9)
                              mnc: 560 # Mobile Network Code (2 or 3 digits string, digit: 0~9)
                            sNssaiList: # the S-NSSAIs List
                              - sst: 2 # Slice/Service Type (uinteger, range: 0~255)
                                sd: 000001 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                    # List of mappings of S-NSSAI in the serving network and the value of the home network
                    mappingListFromPlmn:
                      - operatorName: NTT Docomo # Home PLMN name
                        homePlmnId: # Home PLMN identifier
                          mcc: 440 # Mobile Country Code (3 digits string, digit: 0~9)
                          mnc: 10 # Mobile Network Code (2 or 3 digits string, digit: 0~9)
                        mappingOfSnssai: # List of S-NSSAIs mapping
                          - servingSnssai: # S-NSSAI in the serving network
                              sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                              sd: 000001 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                            homeSnssai: # S-NSSAI in the home network
                              sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                              sd: 1 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                          - servingSnssai: # S-NSSAI in the serving network
                              sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                              sd: 000002 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                            homeSnssai: # S-NSSAI in the home network
                              sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                              sd: 000003 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                          - servingSnssai: # S-NSSAI in the serving network
                              sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                              sd: 000003 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                            homeSnssai: # S-NSSAI in the home network
                              sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                              sd: 000004 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                          - servingSnssai: # S-NSSAI in the serving network
                              sst: 2 # Slice/Service Type (uinteger, range: 0~255)
                              sd: 000001 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                            homeSnssai: # S-NSSAI in the home network
                              sst: 2 # Slice/Service Type (uinteger, range: 0~255)
                              sd: 000002 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                      - operatorName: AT&T Mobility # Home PLMN name
                        homePlmnId: # Home PLMN identifier
                          mcc: 310 # Mobile Country Code (3 digits string, digit: 0~9)
                          mnc: 560 # Mobile Network Code (2 or 3 digits string, digit: 0~9)
                        mappingOfSnssai:
                          - servingSnssai: # S-NSSAI in the serving network
                              sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                              sd: 000001 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                            homeSnssai: # S-NSSAI in the home network
                              sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                              sd: 000002 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                          - servingSnssai: # S-NSSAI in the serving network
                              sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                              sd: 000002 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                            homeSnssai: # S-NSSAI in the home network
                              sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                              sd: 000003 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)

                  # the kind of log output
                  # debugLevel: how detailed to output, value: trace, debug, info, warn, error, fatal, panic
                  # ReportCaller: enable the caller report or not, value: true or false
                  logger:
                    NSSF:
                      debugLevel: info
                      ReportCaller: false

            - name  : Create AMF config dir
              shell : |
                mkdir config
                mkdir config/TLS
              args:
                chdir: "{{ AMF_DIR }}"

            - name  : Copy AMF cert's 1/2
              fetch: src={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/config/TLS/amf.pem dest={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/NFs/amf/config/TLS/ flat=yes
              
            - name  : Copy AMF cert's 2/2
              fetch: src={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/config/TLS/amf.key dest={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/NFs/amf/config/TLS/ flat=yes

            - name  : Build amfcfg.yaml config file
              copy:
                dest: "{{ AMF_DIR }}/config/amfcfg.yaml"
                content: |
                  info:
                    version: 1.0.3
                    description: AMF initial local configuration

                  configuration:
                    amfName: AMF # the name of this AMF
                    ngapIpList:  # the IP list of N2 interfaces on this AMF
                      - {{ AMF_NGAP_IP_ADDRESS }}
                    sbi: # Service-based interface information
                      scheme: http # the protocol for sbi (http or https)
                      registerIPv4: {{ AMF_IP_ADDRESS }} # IP used to register to NRF
                      bindingIPv4: {{ AMF_IP_ADDRESS }}  # IP used to bind the service
                      port: {{ AMF_PORT }} # port used to bind the service
                      tls: # the local path of TLS key
                        pem: config/TLS/amf.pem # AMF TLS Certificate
                        key: config/TLS/amf.key # AMF TLS Private key
                    serviceNameList: # the SBI services provided by this AMF, refer to TS 29.518
                      - namf-comm # Namf_Communication service
                      - namf-evts # Namf_EventExposure service
                      - namf-mt   # Namf_MT service
                      - namf-loc  # Namf_Location service
                      - namf-oam  # OAM service
                    servedGuamiList: # Guami (Globally Unique AMF ID) list supported by this AMF
                      # <GUAMI> = <MCC><MNC><AMF ID>
                      - plmnId: # Public Land Mobile Network ID, <PLMN ID> = <MCC><MNC>
                          mcc: 208 # Mobile Country Code (3 digits string, digit: 0~9)
                          mnc: 93 # Mobile Network Code (2 or 3 digits string, digit: 0~9)
                        amfId: cafe00 # AMF identifier (3 bytes hex string, range: 000000~FFFFFF)
                    supportTaiList:  # the TAI (Tracking Area Identifier) list supported by this AMF
                      - plmnId: # Public Land Mobile Network ID, <PLMN ID> = <MCC><MNC>
                          mcc: 208 # Mobile Country Code (3 digits string, digit: 0~9)
                          mnc: 93 # Mobile Network Code (2 or 3 digits string, digit: 0~9)
                        tac: 1 # Tracking Area Code (uinteger, range: 0~16777215)
                    plmnSupportList: # the PLMNs (Public land mobile network) list supported by this AMF
                      - plmnId: # Public Land Mobile Network ID, <PLMN ID> = <MCC><MNC>
                          mcc: 208 # Mobile Country Code (3 digits string, digit: 0~9)
                          mnc: 93 # Mobile Network Code (2 or 3 digits string, digit: 0~9)
                        snssaiList: # the S-NSSAI (Single Network Slice Selection Assistance Information) list supported by this AMF
                          - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                            sd: 010203 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                          - sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                            sd: 112233 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                    supportDnnList:  # the DNN (Data Network Name) list supported by this AMF
                      - internet
                    nrfUri: http://{{ NRF_IP_ADDRESS }}:{{ NRF_PORT }} # a valid URI of NRF
                    security:  # NAS security parameters
                      integrityOrder: # the priority of integrity algorithms
                        - NIA2
                        # - NIA0
                      cipheringOrder: # the priority of ciphering algorithms
                        - NEA0
                        # - NEA2
                    networkName:  # the name of this core network
                      full: free5GC
                      short: free
                    locality: area1 # Name of the location where a set of AMF, SMF and UPFs are located
                    networkFeatureSupport5GS: # 5gs Network Feature Support IE, refer to TS 24.501
                      enable: true # append this IE in Registration accept or not
                      length: 1 # IE content length (uinteger, range: 1~3)
                      imsVoPS: 0 # IMS voice over PS session indicator (uinteger, range: 0~1)
                      emc: 0 # Emergency service support indicator for 3GPP access (uinteger, range: 0~3)
                      emf: 0 # Emergency service fallback indicator for 3GPP access (uinteger, range: 0~3)
                      iwkN26: 0 # Interworking without N26 interface indicator (uinteger, range: 0~1)
                      mpsi: 0 # MPS indicator (uinteger, range: 0~1)
                      emcN3: 0 # Emergency service support indicator for Non-3GPP access (uinteger, range: 0~1)
                      mcsi: 0 # MCS indicator (uinteger, range: 0~1)
                    t3502Value: 720  # timer value (seconds) at UE side
                    t3512Value: 3600 # timer value (seconds) at UE side
                    non3gppDeregistrationTimerValue: 3240 # timer value (seconds) at UE side
                    # retransmission timer for paging message
                    t3513:
                      enable: true     # true or false
                      expireTime: 6s   # default is 6 seconds
                      maxRetryTimes: 4 # the max number of retransmission
                    # retransmission timer for NAS Deregistration Request message
                    t3522:
                      enable: true     # true or false
                      expireTime: 6s   # default is 6 seconds
                      maxRetryTimes: 4 # the max number of retransmission
                    # retransmission timer for NAS Registration Accept message
                    t3550:
                      enable: true     # true or false
                      expireTime: 6s   # default is 6 seconds
                      maxRetryTimes: 4 # the max number of retransmission
                    # retransmission timer for NAS Authentication Request/Security Mode Command message
                    t3560:
                      enable: true     # true or false
                      expireTime: 6s   # default is 6 seconds
                      maxRetryTimes: 4 # the max number of retransmission
                    # retransmission timer for NAS Notification message
                    t3565:
                      enable: true     # true or false
                      expireTime: 6s   # default is 6 seconds
                      maxRetryTimes: 4 # the max number of retransmission
                    # retransmission timer for NAS Identity Request message
                    t3570:
                      enable: true     # true or false
                      expireTime: 6s   # default is 6 seconds
                      maxRetryTimes: 4 # the max number of retransmission

                  # the kind of log output
                  # debugLevel: how detailed to output, value: trace, debug, info, warn, error, fatal, panic
                  # ReportCaller: enable the caller report or not, value: true or false
                  logger:
                    AMF:
                      debugLevel: info
                      ReportCaller: false
                    NAS:
                      debugLevel: info
                      ReportCaller: false
                    FSM:
                      debugLevel: info
                      ReportCaller: false
                    NGAP:
                      debugLevel: info
                      ReportCaller: false
                    Aper:
                      debugLevel: info
                      ReportCaller: false

            - name  : Create PCF config dir
              shell : |
                mkdir config
                mkdir config/TLS
              args:
                chdir: "{{ PCF_DIR }}"

            - name  : Copy PCF cert's 1/2
              fetch: src={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/config/TLS/pcf.pem dest={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/NFs/pcf/config/TLS/ flat=yes
              
            - name  : Copy AMF cert's 2/2
              fetch: src={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/config/TLS/pcf.key dest={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/NFs/pcf/config/TLS/ flat=yes

            - name  : Build pcfcfg.yaml config file
              copy:
                dest: "{{ PCF_DIR }}/config/pcfcfg.yaml"
                content: |
                  info:
                    version: 1.0.1
                    description: PCF initial local configuration

                  configuration:
                    pcfName: PCF # the name of this PCF
                    sbi: # Service-based interface information
                      scheme: http # the protocol for sbi (http or https)
                      registerIPv4: {{ PCF_IP_ADDRESS }} # IP used to register to NRF
                      bindingIPv4: {{ PCF_IP_ADDRESS }}  # IP used to bind the service
                      port: {{ PCF_PORT }}            # port used to bind the service
                      tls: # the local path of TLS key
                        pem: config/TLS/pcf.pem # PCF TLS Certificate
                        key: config/TLS/pcf.key # PCF TLS Private key
                    timeFormat: 2019-01-02 15:04:05 # time format of this PCF
                    defaultBdtRefId: BdtPolicyId-   # BDT Reference ID, indicating transfer policies of background data transfer.
                    nrfUri: http://{{ NRF_IP_ADDRESS }}:{{ NRF_PORT }}  # a valid URI of NRF
                    serviceList:   # the SBI services provided by this PCF, refer to TS 29.507
                      - serviceName: npcf-am-policy-control # Npcf_AMPolicyControl service
                      - serviceName: npcf-smpolicycontrol   # Npcf_SMPolicyControl service
                        suppFeat: 3fff # the features supported by Npcf_SMPolicyControl, name defined in TS 29.512 5.8-1, value defined in TS 29.571 5.2.2
                      - serviceName: npcf-bdtpolicycontrol    # Npcf_BDTPolicyControl service
                      - serviceName: npcf-policyauthorization # Npcf_PolicyAuthorization service
                        suppFeat: 3    # the features supported by Npcf_PolicyAuthorization, name defined in TS 29.514 5.8-1, value defined in TS 29.571 5.2.2
                      - serviceName: npcf-eventexposure       # Npcf_EventExposure service
                      - serviceName: npcf-ue-policy-control   # Npcf_UEPolicyControl service
                    mongodb:       # the mongodb connected by this PCF
                      name: free5gc                  # name of the mongodb
                      url: {{ MONGO_URL_CONNECTION }} # a valid URL of the mongodb
                    locality: area1 # Name of the location where a set of AMF, SMF, PCF and UPFs are located

                  # the kind of log output
                  # debugLevel: how detailed to output, value: trace, debug, info, warn, error, fatal, panic
                  # ReportCaller: enable the caller report or not, value: true or false
                  logger:
                    PCF:
                      debugLevel: info
                      ReportCaller: false

            - name  : Create SMF config dir
              shell : |
                mkdir config
                mkdir config/TLS
              args:
                chdir: "{{ SMF_DIR }}"

            - name  : Copy SMF cert's 1/2
              fetch: src={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/config/TLS/smf.pem dest={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/NFs/smf/config/TLS/ flat=yes
              
            - name  : Copy SMF cert's 2/2
              fetch: src={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/config/TLS/smf.key dest={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/NFs/smf/config/TLS/ flat=yes

            - name  : Build smfcfg.yaml config file
              copy:
                dest: "{{ SMF_DIR }}/config/smfcfg.yaml"
                content: |
                  info:
                    version: 1.0.2
                    description: SMF initial local configuration

                  configuration:
                    smfName: SMF # the name of this SMF
                    sbi: # Service-based interface information
                      scheme: http # the protocol for sbi (http or https)
                      registerIPv4: {{ SMF_IP_ADDRESS }} # IP used to register to NRF
                      bindingIPv4: {{ SMF_IP_ADDRESS }}  # IP used to bind the service
                      port: {{ SMF_PORT }} # Port used to bind the service
                      tls: # the local path of TLS key
                        key: config/TLS/smf.key # SMF TLS Certificate
                        pem: config/TLS/smf.pem # SMF TLS Private key
                    serviceNameList: # the SBI services provided by this SMF, refer to TS 29.502
                      - nsmf-pdusession # Nsmf_PDUSession service
                      - nsmf-event-exposure # Nsmf_EventExposure service
                      - nsmf-oam # OAM service
                    snssaiInfos: # the S-NSSAI (Single Network Slice Selection Assistance Information) list supported by this AMF
                      - sNssai: # S-NSSAI (Single Network Slice Selection Assistance Information)
                          sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                          sd: 010203 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                        dnnInfos: # DNN information list
                          - dnn: internet # Data Network Name
                            dns: # the IP address of DNS
                              ipv4: 8.8.8.8
                      - sNssai: # S-NSSAI (Single Network Slice Selection Assistance Information)
                          sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                          sd: 112233 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                        dnnInfos: # DNN information list
                          - dnn: internet # Data Network Name
                            dns: # the IP address of DNS
                              ipv4: 8.8.8.8
                    plmnList: # the list of PLMN IDs that this SMF belongs to (optional, remove this key when unnecessary)
                      - mcc: "208" # Mobile Country Code (3 digits string, digit: 0~9)
                        mnc: "93" # Mobile Network Code (2 or 3 digits string, digit: 0~9)
                    locality: area1 # Name of the location where a set of AMF, SMF and UPFs are located
                    pfcp: # the IP address of N4 interface on this SMF (PFCP)
                      addr: {{ SMF_N4_INTERFACE_IP_ADDRESS }}
                    userplaneInformation: # list of userplane information
                      upNodes: # information of userplane node (AN or UPF)
                        gNB1: # the name of the node
                          type: AN # the type of the node (AN or UPF)
                        UPF:  # the name of the node
                          type: UPF # the type of the node (AN or UPF)
                          nodeID: {{ UPF_IP_ADDRESS   }} # the IP/FQDN of N4 interface on this UPF (PFCP)
                          sNssaiUpfInfos: # S-NSSAI information list for this UPF
                            - sNssai: # S-NSSAI (Single Network Slice Selection Assistance Information)
                                sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                                sd: 010203 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                              dnnUpfInfoList: # DNN information list for this S-NSSAI
                                - dnn: internet
                                  pools:
                                    - cidr: 10.60.0.0/16
                            - sNssai: # S-NSSAI (Single Network Slice Selection Assistance Information)
                                sst: 1 # Slice/Service Type (uinteger, range: 0~255)
                                sd: 112233 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                              dnnUpfInfoList: # DNN information list for this S-NSSAI
                                - dnn: internet
                                  pools:
                                    - cidr: 10.61.0.0/16
                          interfaces: # Interface list for this UPF
                            - interfaceType: N3 # the type of the interface (N3 or N9)
                              endpoints: # the IP address of this N3/N9 interface on this UPF
                                - {{ SMF_N3_INTERFACE_IP_ADDRESS }}
                              networkInstance: internet # Data Network Name (DNN)
                      links: # the topology graph of userplane, A and B represent the two nodes of each link
                        - A: gNB1
                          B: UPF
                    nrfUri: http://{{ NRF_IP_ADDRESS }}:{{ NRF_PORT }} # a valid URI of NRF

                  # the kind of log output
                  # debugLevel: how detailed to output, value: trace, debug, info, warn, error, fatal, panic
                  # ReportCaller: enable the caller report or not, value: true or false
                  logger:
                    SMF:
                      debugLevel: info
                      ReportCaller: false
                    NAS:
                      debugLevel: info
                      ReportCaller: false
                    NGAP:
                      debugLevel: info
                      ReportCaller: false
                    Aper:
                      debugLevel: info
                      ReportCaller: false
                    PFCP:
                      debugLevel: info
                      ReportCaller: false

            - name  : Build uerouting.yaml config file
              copy:
                dest: "{{ SMF_DIR }}/config/uerouting.yaml"
                content: |
                  info:
                    version: 1.0.1
                    description: Routing information for UE

                  ueRoutingInfo: # the list of UE routing information
                    UE1: # Group Name
                      members:
                      - imsi-2089300007487 # Subscription Permanent Identifier of the UE
                      topology: # Network topology for this group (Uplink: A->B, Downlink: B->A)
                      # default path derived from this topology
                      # node name should be consistent with smfcfg.yaml
                        - A: gNB1
                          B: BranchingUPF
                        - A: BranchingUPF
                          B: AnchorUPF1
                      specificPath:
                        - dest: 10.60.0.103/32 # the destination IP address on Data Network (DN)
                          # the order of UPF nodes in this path. We use the UPF's name to represent each UPF node.
                          # The UPF's name should be consistent with smfcfg.yaml
                          path: [BranchingUPF, AnchorUPF2]

                    UE2: # Group Name
                      members:
                      - imsi-2089300007486 # Subscription Permanent Identifier of the UE
                      topology: # Network topology for this group (Uplink: A->B, Downlink: B->A)
                      # default path derived from this topology
                      # node name should be consistent with smfcfg.yaml
                        - A: gNB1
                          B: BranchingUPF
                        - A: BranchingUPF
                          B: AnchorUPF1
                      specificPath:
                        - dest: 10.0.0.11/32 # the destination IP address on Data Network (DN)
                          # the order of UPF nodes in this path. We use the UPF's name to represent each UPF node.
                          # The UPF's name should be consistent with smfcfg.yaml
                          path: [BranchingUPF, AnchorUPF2]

            - name  : Create N3IWF config dir
              shell : |
                mkdir config
                mkdir config/TLS
              args:
                chdir: "{{ N3IWF_DIR }}"
              when: install_n3iwf == 'true'

            - name  : Copy N3IWF cert's 1/2
              fetch: src={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/config/TLS/n3iwf.pem dest={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/NFs/n3iwf/config/TLS/ flat=yes
              
            - name  : Copy N3IWF cert's 2/2
              fetch: src={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/config/TLS/n3iwf.key dest={{ GO_SRC_DIR }}/{{ FREE5GC_CHECKOUT_FOLDER_NAME }}/NFs/n3iwf/config/TLS/ flat=yes

            - name  : Build n3iwfcfg.yaml config file
              copy:
                dest: "{{ N3IWF_DIR }}/config/n3iwfcfg.yaml"
                content: |
                  info:
                    version: 1.0.1
                    description: N3IWF initial local configuration

                  configuration:
                    N3IWFInformation:
                      GlobalN3IWFID: # ID used to globally identify an N3IWF
                        PLMNID: # Public Land Mobile Network ID, <PLMN ID> = <MCC><MNC>
                          MCC: 208 # Mobile Country Code (3 digits string, digit: 0~9)
                          MNC: 93 # Mobile Network Code (2 or 3 digits string, digit: 0~9)
                        N3IWFID: 135 # ID used to identify an N3IWF in PLMN (uinteger, range: 0~65535)
                      Name: free5GC_N3IWF # The name of this N3IWF
                      SupportedTAList: # Tracking Area supported by this N3IWF
                        - TAC: 000001 # Tracking Area Code (3 bytes hex string, range: 000000~FFFFFF)
                          BroadcastPLMNList: # Refer to TS 38.413
                            - PLMNID: # Public Land Mobile Network ID
                                MCC: 208 # Mobile Country Code (3 digits string, digit: 0~9)
                                MNC: 93 # Mobile Network Code (2 or 3 digits string, digit: 0~9)
                              TAISliceSupportList: # Network Slice supported in this TAI
                                - SNSSAI: # Single Network Slice Selection Assistance Information
                                    SST: 1 # Slice/Service Type (1 byte hex string, range: 0~F)
                                    SD: 010203 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                                - SNSSAI: # Single Network Slice Selection Assistance Information
                                    SST: 1 # Slice/Service Type (1 byte hex string, range: 0~F)
                                    SD: 112233 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)
                    AMFSCTPAddresses: # the IP list of N2 interfaces (SCTP) on AMF when using NGAP
                      - IP:
                        - {{ AMF_NGAP_IP_ADDRESS }}
                        Port: {{ N3IWF_AMF_SCTP_PORT }}

                    # --- Bind Interfaces ---
                    IKEBindAddress: {{ N3IWF_IKE_BIND_ADDRESS }} # IP address of Nwu interface (IKE) on this N3IWF

                    IPSecInterfaceAddress: {{ N3IWF_IP_SEC_INTERFACE_ADDRESS }} # IP address of IPSec virtual interface (IPsec tunnel enpoint on this N3IWF)

                    UEIPAddressRange: {{ N3IWF_UE_IP_ADDRESS_RANGE }} # IP address allocated to UE in IPSec tunnel

                    IPSecInterfaceMark: {{ N3IWF_IP_SEC_INTERFACE_MARK }} # IPSec virtual interface mark (Any value except to 0, default value is 7 if not defined)

                    GTPBindAddress: {{ AMF_NGAP_IP_ADDRESS }} # IP address of N3 interface (GTP) on this N3IWF

                    NASTCPPort: {{ N3IWF_NAS_TCP_PORT }} # TCP port which the NAS listens on

                    FQDN: n3iwf.free5gc.org # FQDN of this N3IWF

                    # --- Security ---
                    PrivateKey: config/TLS/n3iwf.key # Private key file path
                    CertificateAuthority: config/TLS/n3iwf.pem # Certificate Authority (CA) file path
                    Certificate: config/TLS/n3iwf.pem # Certificate file path

                  # the kind of log output
                  # debugLevel: how detailed to output, value: trace, debug, info, warn, error, fatal, panic
                  # ReportCaller: enable the caller report or not, value: true or false
                  logger:
                    N3IWF: # The default log level is DEBUG to print SA keys. Please change it to INFO when deployed.
                      debugLevel: debug
                      ReportCaller: false
                    NGAP:
                      debugLevel: info
                      ReportCaller: false
                    Aper:
                      debugLevel: info
                      ReportCaller: false

              when: install_n3iwf == 'true'          

            - name  : Remove webuicfg.yaml default file config
              shell : rm config/webuicfg.yaml
              args:
                chdir: "{{ WEB_CONSOLE_BASE_DIR }}"

            - name  : Build webuicfg.yaml config file
              copy:
                dest: "{{ WEB_CONSOLE_BASE_DIR }}/config/webuicfg.yaml"
                content: |
                  info:
                    version: 1.0.0
                    description: WebUI initial local configuration

                  configuration:
                    mongodb: # the mongodb connected by this webui
                      name: free5gc # name of the mongodb
                      url: {{ MONGO_URL_CONNECTION }} # a valid URL of the mongodb

            - name  : Build all NFs freee5gc
              shell : make
              args:
                chdir: "{{ FREE5GC_DIR_INSTALL }}"

            - name  : BuilD WebConsole
              shell :  |
                    yarn install
                    yarn build
                    rm -rf ../public
                    cp -R build ../public
              args:
                chdir: "{{ WEB_CONSOLE_FRONTEND_DIR }}"
              when: build_webconsole == 'true'

            - name  : Build WebConsole
              shell :  |
                    go build -o bin/webconsole server.go
              args:
                chdir: "{{ WEB_CONSOLE_BASE_DIR }}"
              when: build_webconsole == 'true'

            - name  : Remove UPF default file config
              shell : rm upfcfg.yaml
              args:
                chdir: "{{ UPF_DIR_CONFIG }}"

            - name  : Build upfcfg.yaml config file
              copy:
                dest: "{{ UPF_DIR_CONFIG }}/upfcfg.yaml"
                content: |
                  info:
                    version: 1.0.0
                    description: UPF configuration
                  
                  configuration:
                    # the kind of log output
                      # debugLevel: how detailed to output, value: trace, debug, info, warn, error, fatal, panic
                      # ReportCaller: enable the caller report or not, value: true or false
                    debugLevel: info
                    ReportCaller: false

                    # The IP list of the N4 interface on this UPF (Can't set to 0.0.0.0)
                    pfcp:
                      - addr: {{ UPF_IP_ADDRESS }}
                    # The IP list of the N3/N9 interfaces on this UPF
                    # If there are multiple connection, set addr to 0.0.0.0 or list all the addresses
                    gtpu:
                      - addr: {{ GTPU_UPF_IP_ADDRESS }}
                      # [optional] gtpu.name
                      # - name: upf.5gc.nctu.me
                      # [optional] gtpu.ifname
                      # - ifname: gtpif

                    # The DNN list supported by UPF
                    dnn_list:
                      - dnn: internet # Data Network Name
                        cidr: 60.60.0.0/24 # Classless Inter-Domain Routing for assigned IPv4 pool of UE
                        # [optional] dnn_list[*].natifname
                        # natifname: eth0

            - name  : Create .run dir
              shell : |
                mkdir .run
                
              args:
                chdir: "{{ FREE5GC_DIR_INSTALL }}"


            - name  : Build A - NRF.run.xml config file
              copy:
                dest: "{{ FREE5GC_DIR_INSTALL }}/.run/A - NRF.run.xml"
                content: |
                  <component name="ProjectRunConfigurationManager">
                    <configuration default="false" name="A - NRF" type="GoApplicationRunConfiguration" factoryName="Go Application" singleton="false">
                      <module name="free5gc" />
                      <working_directory value="$PROJECT_DIR$/NFs/nrf" />
                      <kind value="PACKAGE" />
                      <package value="github.com/free5gc/nrf/cmd" />
                      <directory value="$PROJECT_DIR$" />
                      <filePath value="$PROJECT_DIR$/NFs/nrf/cmd/main.go" />
                      <method v="2" />
                    </configuration>
                  </component>  

            - name  : Build B - UDR.run.xml config file
              copy:
                dest: "{{ FREE5GC_DIR_INSTALL }}/.run/B - UDR.run.xml"
                content: |
                  <component name="ProjectRunConfigurationManager">
                    <configuration default="false" name="B - UDR" type="GoApplicationRunConfiguration" factoryName="Go Application" singleton="false">
                      <module name="free5gc" />
                      <working_directory value="$PROJECT_DIR$/NFs/udr" />
                      <kind value="PACKAGE" />
                      <package value="github.com/free5gc/udr/cmd" />
                      <directory value="$PROJECT_DIR$" />
                      <filePath value="$PROJECT_DIR$/NFs/udr/cmd/main.go" />
                      <method v="2" />
                    </configuration>
                  </component>  

            - name  : Build C - UDM.run.xml config file
              copy:
                dest: "{{ FREE5GC_DIR_INSTALL }}/.run/C - UDM.run.xml"
                content: |
                  <component name="ProjectRunConfigurationManager">
                    <configuration default="false" name="C - UDM" type="GoApplicationRunConfiguration" factoryName="Go Application" singleton="false">
                      <module name="free5gc" />
                      <working_directory value="$PROJECT_DIR$/NFs/udm" />
                      <kind value="PACKAGE" />
                      <package value="github.com/free5gc/udm/cmd" />
                      <directory value="$PROJECT_DIR$" />
                      <filePath value="$PROJECT_DIR$/NFs/udm/cmd/main.go" />
                      <method v="2" />
                    </configuration>
                  </component> 

            - name  : Build D - AUSF.run.xml config file
              copy:
                dest: "{{ FREE5GC_DIR_INSTALL }}/.run/D - AUSF.run.xml"
                content: |
                  <component name="ProjectRunConfigurationManager">
                    <configuration default="false" name="D - AUSF" type="GoApplicationRunConfiguration" factoryName="Go Application" singleton="false">
                      <module name="free5gc" />
                      <working_directory value="$PROJECT_DIR$/NFs/ausf" />
                      <kind value="PACKAGE" />
                      <package value="github.com/free5gc/ausf/cmd" />
                      <directory value="$PROJECT_DIR$" />
                      <filePath value="$PROJECT_DIR$/NFs/ausf/cmd/main.go" />
                      <method v="2" />
                    </configuration>
                  </component> 

            - name  : Build E - NSSF.run.xml config file
              copy:
                dest: "{{ FREE5GC_DIR_INSTALL }}/.run/E - NSSF.run.xml"
                content: |
                  <component name="ProjectRunConfigurationManager">
                    <configuration default="false" name="E - NSSF" type="GoApplicationRunConfiguration" factoryName="Go Application" singleton="false">
                      <module name="free5gc" />
                      <working_directory value="$PROJECT_DIR$/NFs/nssf" />
                      <kind value="PACKAGE" />
                      <package value="github.com/free5gc/nssf/cmd" />
                      <directory value="$PROJECT_DIR$" />
                      <filePath value="$PROJECT_DIR$/NFs/nssf/cmd/main.go" />
                      <method v="2" />
                    </configuration>
                  </component> 

            - name  : Build F - AMF.run.xml config file
              copy:
                dest: "{{ FREE5GC_DIR_INSTALL }}/.run/F - AMF.run.xml"
                content: |
                  <component name="ProjectRunConfigurationManager">
                    <configuration default="false" name="F - AMF" type="GoApplicationRunConfiguration" factoryName="Go Application" singleton="false">
                      <module name="free5gc" />
                      <working_directory value="$PROJECT_DIR$/NFs/amf" />
                      <kind value="PACKAGE" />
                      <package value="github.com/free5gc/amf/cmd" />
                      <directory value="$PROJECT_DIR$" />
                      <filePath value="$PROJECT_DIR$/NFs/amf/cmd/main.go" />
                      <method v="2" />
                    </configuration>
                  </component> 

            - name  : Build Free5GC-Base-Init.run.xml config file
              copy:
                dest: "{{ FREE5GC_DIR_INSTALL }}/.run/Free5GC-Base-Init.run.xml"
                content: |
                  <component name="ProjectRunConfigurationManager">
                    <configuration default="false" name="Free5GC-Base-Init" type="CompoundRunConfigurationType">
                      <toRun name="A - NRF" type="GoApplicationRunConfiguration" />
                      <toRun name="B - UDR" type="GoApplicationRunConfiguration" />
                      <toRun name="C - UDM" type="GoApplicationRunConfiguration" />
                      <toRun name="D - AUSF" type="GoApplicationRunConfiguration" />
                      <toRun name="E - NSSF" type="GoApplicationRunConfiguration" />
                      <toRun name="F - AMF" type="GoApplicationRunConfiguration" />
                      <toRun name="G - PCF" type="GoApplicationRunConfiguration" />
                      <toRun name="I - SMF" type="GoApplicationRunConfiguration" />
                      <method v="2" />
                    </configuration>
                  </component>  

            - name  : Build G - PCF.run.xml config file
              copy:
                dest: "{{ FREE5GC_DIR_INSTALL }}/.run/G - PCF.run.xml"
                content: |
                  <component name="ProjectRunConfigurationManager">
                    <configuration default="false" name="G - PCF" type="GoApplicationRunConfiguration" factoryName="Go Application" singleton="false">
                      <module name="free5gc" />
                      <working_directory value="$PROJECT_DIR$/NFs/pcf" />
                      <kind value="PACKAGE" />
                      <package value="github.com/free5gc/pcf/cmd" />
                      <directory value="$PROJECT_DIR$" />
                      <filePath value="$PROJECT_DIR$/NFs/pcf/cmd/main.go" />
                      <method v="2" />
                    </configuration>
                  </component> 

            - name  : Build I - SMF.run.xml config file
              copy:
                dest: "{{ FREE5GC_DIR_INSTALL }}/.run/I - SMF.run.xml"
                content: |
                  <component name="ProjectRunConfigurationManager">
                    <configuration default="false" name="I - SMF" type="GoApplicationRunConfiguration" factoryName="Go Application" singleton="false">
                      <module name="free5gc" />
                      <working_directory value="$PROJECT_DIR$/NFs/smf" />
                      <kind value="PACKAGE" />
                      <package value="github.com/free5gc/smf/cmd" />
                      <directory value="$PROJECT_DIR$" />
                      <filePath value="$PROJECT_DIR$/NFs/smf/cmd/main.go" />
                      <method v="2" />
                    </configuration>
                  </component>   

            - name  : Config N3IWF env
              shell : |
                ip link add name ipsec0 type vti local $(hostname -i | awk '{print $1}') remote 0.0.0.0 key 5
                ip a add 10.0.0.1/24 dev ipsec0
                ip l set dev ipsec0 up
              when: install_n3iwf == 'true'  

            - name: Remove N3IWF dir (if exists)
              shell:  sudo rm -rf {{ N3IWF_DIR }}
              ignore_errors: true
              when: install_n3iwf == 'true'                                                                                                                                   
